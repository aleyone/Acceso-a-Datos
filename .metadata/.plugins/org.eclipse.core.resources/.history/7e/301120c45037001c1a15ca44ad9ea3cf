package es.addbl3.AE3;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.*;
import org.xml.sax.SAXException;

class Libro {
	private int identificador;
	private String titulo, autor, año, editorial, numpag;

	Libro(int identificador, String titulo, String autor, String año, String editorial, String numpag) {
		this.identificador = identificador;
		this.titulo = titulo;
		this.autor = autor;
		this.año = año;
		this.editorial = editorial;
		this.numpag = numpag;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	public void setAutor(String autor) {
		this.autor = autor;
	}

	public void setAño(String año) {
		this.año = año;
	}

	public void setEditorial(String editorial) {
		this.editorial = editorial;
	}

	public void setNumPag(String numpag) {
		this.numpag = numpag;
	}

	public int crearLibro(Libro libro) {
		ArrayList<Libro> listado = recuperarTodos();
		Libro newLibro = new Libro(libro.identificador, libro.titulo, libro.autor, libro.año, libro.editorial,
				libro.numpag);
		listado.add(newLibro);
		guardarXML(listado);
		return libro.identificador;
	}

	public Libro recuperarLibro(int identificador) {
		ArrayList<Libro> miListado = recuperarTodos();
		int puntero = 0;
		Libro resultado;
		for (int i = 0; i < miListado.size(); i++) {
			if (miListado.get(i).identificador == identificador) {
				puntero = i;
			}
		}
		resultado = miListado.get(puntero);

		return resultado;
	}

	public void mostrarLibro(Libro libro) {
		System.out.println("Id: " + String.valueOf(libro.identificador) + "\nTítulo: " + libro.titulo + "\nAutor: "
				+ libro.autor + "\nAño: " + libro.año + "\nEditorial: " + libro.editorial + "\nNº páginas: "
				+ libro.numpag + "\n");
	}

	public void borrarLibro(int identificador) {
		ArrayList<Libro> miListado = recuperarTodos();
		for (int i = 0; i < miListado.size(); i++) {
			if (miListado.get(i).identificador == identificador) {
				miListado.remove(miListado.get(i));
			}
		}
		guardarXML(miListado);
	}

	public void actualizarLibro(int identificador) {
		ArrayList<Libro> miListado = recuperarTodos();
		String eleccion = "";
		int puntero=0;
		for (int i = 0; i < miListado.size(); i++) {
			if (miListado.get(i).identificador == identificador) {
				puntero = i;
			}
		}
		while (eleccion != "F") {
			System.out.println("¿Qué quieres modificar?");
			System.out.print(
					"T - Título\nA - Autor\nY - Año\nE - Editorial\nN - Número de páginas\nF - Fin de la edición\n");
			Scanner teclado = new Scanner(System.in);
			eleccion = teclado.nextLine();
			switch (eleccion) {
			case "T":
				System.out.println("Introduce nuevo título: ");
				miListado.get(puntero).setTitulo(teclado.nextLine());
				break;
			case "A":
				System.out.println("Introduce nuevo autor: ");
				miListado.get(puntero).setAutor(teclado.nextLine());
				break;
			case "Y":
				System.out.println("Introduce nuevo año: ");
				miListado.get(puntero).setAño(teclado.nextLine());
				break;
			case "E":
				System.out.println("Introduce nueva editorial: ");
				miListado.get(puntero).setEditorial(teclado.nextLine());
				break;
			case "N":
				System.out.println("Introduce nuevo número de páginas: ");
				miListado.get(puntero).setNumPag(teclado.nextLine());
				break;
			case "F":
				guardarXML(miListado);
				break;
			default:
				System.out.println("Opción no válida.\n");
				break;
			}
			teclado.close();
		}
	}

	// public class Biblioteca {

	public ArrayList<Libro> recuperarTodos() {
		ArrayList<Libro> listado = new ArrayList<Libro>();
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new File("biblioteca.xml"));
			Element raiz = doc.getDocumentElement();
			NodeList nodeList = doc.getElementsByTagName("libro");
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node node = nodeList.item(i);
				Element element = (Element) node;
				int id = Integer.parseInt(element.getElementsByTagName("identificador").item(0).getTextContent());
				String tit = element.getElementsByTagName("titulo").item(0).getTextContent();
				String aut = element.getElementsByTagName("autor").item(0).getTextContent();
				String any = element.getElementsByTagName("año").item(0).getTextContent();
				String edit = element.getElementsByTagName("editorial").item(0).getTextContent();
				String nump = element.getElementsByTagName("numpag").item(0).getTextContent();
				Libro librosXML = new Libro(id, tit, aut, any, edit, nump);
				listado.add(librosXML);
			}

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
//		for (Libro libros : listado) {
//			this.mostrarLibro(libros);
//		}

		return listado;
	}

	public void guardarXML(ArrayList<Libro> arrayLibros) {
		// ArrayList<Libro> misLibros = recuperarTodos();
		try {
			DocumentBuilderFactory dFact = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuild = dFact.newDocumentBuilder();
			Document doc = dBuild.newDocument();
			Element raiz = doc.createElement("biblioteca");
			doc.appendChild(raiz);
			for (int i = 0; i < arrayLibros.size(); i++) {
				Element libro1 = doc.createElement("libro");
				raiz.appendChild(libro1);
				Element id = doc.createElement("identificador");
				id.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).identificador)));
				libro1.appendChild(id);
				Element titulo = doc.createElement("titulo");
				titulo.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).titulo)));
				libro1.appendChild(titulo);
				Element autor = doc.createElement("autor");
				autor.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).autor)));
				libro1.appendChild(autor);
				Element año = doc.createElement("año");
				año.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).año)));
				libro1.appendChild(año);
				Element editorial = doc.createElement("editorial");
				editorial.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).autor)));
				libro1.appendChild(editorial);
				Element numpag = doc.createElement("numpag");
				numpag.appendChild(doc.createTextNode(String.valueOf(arrayLibros.get(i).numpag)));
				libro1.appendChild(numpag);
			}

			TransformerFactory tranFactory = TransformerFactory.newInstance();
			Transformer aTrans = tranFactory.newTransformer();
			aTrans.setOutputProperty(OutputKeys.ENCODING, "ISO-8859-1");
			aTrans.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
			aTrans.setOutputProperty(OutputKeys.INDENT, "yes");
			DOMSource source = new DOMSource(doc);
			try {
				FileWriter fw = new FileWriter("biblioteca.xml");
				StreamResult result = new StreamResult(fw);
				aTrans.transform(source, result);

			} catch (IOException e) {
				e.printStackTrace();
			} catch (TransformerException e) {
				e.printStackTrace();
			}

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (TransformerConfigurationException e) {
			e.printStackTrace();
		}
	}

//}

}
