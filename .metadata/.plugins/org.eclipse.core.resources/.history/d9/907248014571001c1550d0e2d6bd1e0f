package es.add.aemongodb;

import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;

public class Controlador {
	private Modelo modelo;
	private Vista vista;
	private ActionListener alCreateConnection, alCloseConnection, alShowAll, alShowOne, alDeleteOne, alUpdate,
			alCreateBook, alLoadID, alRemoveID;
	private String listBook;

	public Controlador(Modelo modelo, Vista vista) {
		this.modelo = modelo;
		this.vista = vista;
		control();
	}

	public void control() {
		alCreateConnection = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				MongoCollection cliente = modelo.createConnection();
				vista.getTextArea().setText("Se ha creado correctamente la conexión a la base de datos.\n"
						+ "MODIFICAR REGISTRO: Selecciona un criterio con el radiobutton, introduce el dato deseado en el campo de texto,"
						+ "modifica en la línea inferior ese criterio y pulsa 'modificar\n"
						+ "CREAR REGISTRO: Introduce datos en la línea inferior y pulsa 'Crear registro'.);
				}
		};
		vista.getBtnCreateConnection().addActionListener(alCreateConnection);

		/*alCloseConnection = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				Session session = modelo.createConnection();
				modelo.closeSession(session, listBook);
				vista.getTextArea().setText("Se ha desconectado de la base de datos.");
			}
		};
		vista.getBtnCloseConnection().addActionListener(alCloseConnection);*/
		
		alShowAll = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				MongoCollection collection = modelo.createConnection();
				vista.getTextArea().setText(modelo.listBooks(collection));
				
			}
		};
		vista.getBtnShowBooks().addActionListener(alShowAll);
		
		/*alRemoveID = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				vista.getTextField_Titulo().setText(null);
				vista.getTextField_Autor().setText(null);
				vista.getTextField_AñoN().setText(null);
				vista.getTextField_AñoP().setText(null);
				vista.getTextField_Editorial().setText(null);
				vista.getTextField_Pag().setText(null);
				
			}
		};
		vista.getBtnRemoveId().addActionListener(alRemoveID);
		
		alLoadID = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				Session session = modelo.createConnection();
				int id = Integer.parseInt(vista.getTextField_ID().getText());
				String[] detailsBook = modelo.detailsBook(session, id);
				vista.getTextField_Titulo().setText(detailsBook[0]);
				vista.getTextField_Autor().setText(detailsBook[1]);
				vista.getTextField_AñoN().setText(detailsBook[2]);
				vista.getTextField_AñoP().setText(detailsBook[3]);
				vista.getTextField_Editorial().setText(detailsBook[4]);
				vista.getTextField_Pag().setText(detailsBook[5]);
				vista.getTextArea().setText("Se han cargado correctamente los detalles del libro");

			}
		};
		vista.getBtnLoadID().addActionListener(alLoadID);

		alShowOne = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				Session session = modelo.createConnection();
				int id = Integer.parseInt(vista.getTextField_ID().getText());
				vista.getTextArea().setText(modelo.showOneBook(session, id));
				
			}
		};
		vista.getBtnShowOneBook().addActionListener(alShowOne);
		
		alDeleteOne = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				Session session = modelo.createConnection();
				int id = Integer.parseInt(vista.getTextField_ID().getText());
				modelo.deleteBook(session, id);
				vista.getTextArea().setText("Ha sido eliminado el registro de la base de datos.");
				
			}
		};
		vista.getBtnDeleteBook().addActionListener(alDeleteOne);*/
		
		alUpdate = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				String criterio = "";
				String busqueda ="";
				vista.getTextArea().setText(null);
				MongoCollection collection = modelo.createConnection();
				busqueda = vista.getTextField().getText();
				if (vista.getRadioGrupo().isSelected()){
					criterio = "Grupo";
					String grupo = vista.getTextField_Titulo().getText();
					modelo.updateBook(collection, criterio, busqueda, grupo);
				} else if (vista.getRadioTitulo().isSelected()) {
					criterio ="Titulo";
					String titulo = vista.getTextField_Autor().getText();
					modelo.updateBook(collection, criterio, busqueda, titulo);
				} else if (vista.getRadioFormato().isSelected()) {
					criterio = "Formato";
					String formato = vista.getTextField_Editorial().getText();
					modelo.updateBook(collection, criterio, busqueda, formato);
				} else if (vista.getRdbtnAnyoP().isSelected()) {
					criterio = "Anyo";
					String año = vista.getTextField_AñoN().getText();
					modelo.updateBook(collection, criterio, (int) Integer.parseInt(busqueda), (int) Integer.parseInt(año));
				}				
				
				vista.getTextArea().setText("Ha sido modificado el registro de la base de datos.");
				
			}
		};
		vista.getBtnUpdateBook().addActionListener(alUpdate);
		
		alCreateBook = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				vista.getTextArea().setText(null);
				MongoCollection collection = modelo.createConnection();
				String grupo = vista.getTextField_Titulo().getText();
				String titulo = vista.getTextField_Autor().getText();
				String año_p = vista.getTextField_AñoN().getText();
				String formato = vista.getTextField_Editorial().getText();
				modelo.createBook(collection, grupo, titulo, (int)Integer.parseInt(año_p), formato);
				vista.getTextArea().setText("Ha sido añadido el registro a MongoDB.");
				
			}
		};
		vista.getBtnCreateBook().addActionListener(alCreateBook);
		
	}
}

